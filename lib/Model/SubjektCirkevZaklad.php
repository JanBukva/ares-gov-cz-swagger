<?php
/**
 * SubjektCirkevZaklad
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.58
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubjektCirkevZaklad Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubjektCirkevZaklad implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubjektCirkevZaklad';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'datum_registrace_prav' => '\DateTime',
        'cislo_registrace_prav' => 'string',
        'ico_nastupce' => 'string',
        'datum_zruseni_registrace_prav' => '\DateTime',
        'pravo_zvlastni' => '\Swagger\Client\Model\PravoZvlastni[]',
        'cislo_zruseni_registrace_prav' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'datum_registrace_prav' => 'date',
        'cislo_registrace_prav' => null,
        'ico_nastupce' => null,
        'datum_zruseni_registrace_prav' => 'date',
        'pravo_zvlastni' => null,
        'cislo_zruseni_registrace_prav' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'datum_registrace_prav' => 'datumRegistracePrav',
        'cislo_registrace_prav' => 'cisloRegistracePrav',
        'ico_nastupce' => 'icoNastupce',
        'datum_zruseni_registrace_prav' => 'datumZruseniRegistracePrav',
        'pravo_zvlastni' => 'pravoZvlastni',
        'cislo_zruseni_registrace_prav' => 'cisloZruseniRegistracePrav'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'datum_registrace_prav' => 'setDatumRegistracePrav',
        'cislo_registrace_prav' => 'setCisloRegistracePrav',
        'ico_nastupce' => 'setIcoNastupce',
        'datum_zruseni_registrace_prav' => 'setDatumZruseniRegistracePrav',
        'pravo_zvlastni' => 'setPravoZvlastni',
        'cislo_zruseni_registrace_prav' => 'setCisloZruseniRegistracePrav'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'datum_registrace_prav' => 'getDatumRegistracePrav',
        'cislo_registrace_prav' => 'getCisloRegistracePrav',
        'ico_nastupce' => 'getIcoNastupce',
        'datum_zruseni_registrace_prav' => 'getDatumZruseniRegistracePrav',
        'pravo_zvlastni' => 'getPravoZvlastni',
        'cislo_zruseni_registrace_prav' => 'getCisloZruseniRegistracePrav'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['datum_registrace_prav'] = isset($data['datum_registrace_prav']) ? $data['datum_registrace_prav'] : null;
        $this->container['cislo_registrace_prav'] = isset($data['cislo_registrace_prav']) ? $data['cislo_registrace_prav'] : null;
        $this->container['ico_nastupce'] = isset($data['ico_nastupce']) ? $data['ico_nastupce'] : null;
        $this->container['datum_zruseni_registrace_prav'] = isset($data['datum_zruseni_registrace_prav']) ? $data['datum_zruseni_registrace_prav'] : null;
        $this->container['pravo_zvlastni'] = isset($data['pravo_zvlastni']) ? $data['pravo_zvlastni'] : null;
        $this->container['cislo_zruseni_registrace_prav'] = isset($data['cislo_zruseni_registrace_prav']) ? $data['cislo_zruseni_registrace_prav'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets datum_registrace_prav
     *
     * @return \DateTime
     */
    public function getDatumRegistracePrav()
    {
        return $this->container['datum_registrace_prav'];
    }

    /**
     * Sets datum_registrace_prav
     *
     * @param \DateTime $datum_registrace_prav Datum registrace práv dané církvi.
     *
     * @return $this
     */
    public function setDatumRegistracePrav($datum_registrace_prav)
    {
        $this->container['datum_registrace_prav'] = $datum_registrace_prav;

        return $this;
    }

    /**
     * Gets cislo_registrace_prav
     *
     * @return string
     */
    public function getCisloRegistracePrav()
    {
        return $this->container['cislo_registrace_prav'];
    }

    /**
     * Sets cislo_registrace_prav
     *
     * @param string $cislo_registrace_prav Číslo registrace práv dané církvi.
     *
     * @return $this
     */
    public function setCisloRegistracePrav($cislo_registrace_prav)
    {
        $this->container['cislo_registrace_prav'] = $cislo_registrace_prav;

        return $this;
    }

    /**
     * Gets ico_nastupce
     *
     * @return string
     */
    public function getIcoNastupce()
    {
        return $this->container['ico_nastupce'];
    }

    /**
     * Sets ico_nastupce
     *
     * @param string $ico_nastupce IČO nástupce zrušené právnické osoby.
     *
     * @return $this
     */
    public function setIcoNastupce($ico_nastupce)
    {
        $this->container['ico_nastupce'] = $ico_nastupce;

        return $this;
    }

    /**
     * Gets datum_zruseni_registrace_prav
     *
     * @return \DateTime
     */
    public function getDatumZruseniRegistracePrav()
    {
        return $this->container['datum_zruseni_registrace_prav'];
    }

    /**
     * Sets datum_zruseni_registrace_prav
     *
     * @param \DateTime $datum_zruseni_registrace_prav Datum zrušení registrace práv dané církvi.
     *
     * @return $this
     */
    public function setDatumZruseniRegistracePrav($datum_zruseni_registrace_prav)
    {
        $this->container['datum_zruseni_registrace_prav'] = $datum_zruseni_registrace_prav;

        return $this;
    }

    /**
     * Gets pravo_zvlastni
     *
     * @return \Swagger\Client\Model\PravoZvlastni[]
     */
    public function getPravoZvlastni()
    {
        return $this->container['pravo_zvlastni'];
    }

    /**
     * Sets pravo_zvlastni
     *
     * @param \Swagger\Client\Model\PravoZvlastni[] $pravo_zvlastni pravo_zvlastni
     *
     * @return $this
     */
    public function setPravoZvlastni($pravo_zvlastni)
    {
        $this->container['pravo_zvlastni'] = $pravo_zvlastni;

        return $this;
    }

    /**
     * Gets cislo_zruseni_registrace_prav
     *
     * @return string
     */
    public function getCisloZruseniRegistracePrav()
    {
        return $this->container['cislo_zruseni_registrace_prav'];
    }

    /**
     * Sets cislo_zruseni_registrace_prav
     *
     * @param string $cislo_zruseni_registrace_prav Číslo zrušení registrace práv dané církvi.
     *
     * @return $this
     */
    public function setCisloZruseniRegistracePrav($cislo_zruseni_registrace_prav)
    {
        $this->container['cislo_zruseni_registrace_prav'] = $cislo_zruseni_registrace_prav;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
