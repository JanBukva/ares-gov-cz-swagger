<?php
/**
 * ZivnostZaklad
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ZivnostZaklad Class Doc Comment
 *
 * @category Class
 * @description Živnosti, které ekonomický subjekt provozuje nebo provozoval
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZivnostZaklad implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZivnostZaklad';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'datum_vzniku' => '\DateTime',
        'datum_zaniku' => '\DateTime',
        'platnost_do' => '\DateTime',
        'predmet_podnikani' => 'string',
        'pozastaveni_zivnosti' => '\Swagger\Client\Model\ZivnostProvozovnaPozastaveni[]',
        'podminky_provozovani_zivnosti' => '\Swagger\Client\Model\ZivnostPodminky[]',
        'preruseni_zivnosti' => '\Swagger\Client\Model\ZivnostPreruseni[]',
        'zivnost_bez_oz' => '\Swagger\Client\Model\ZivnostBezOZ[]',
        'datum_aktualizace' => '\DateTime',
        'druh_zivnosti' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'datum_vzniku' => 'date',
        'datum_zaniku' => 'date',
        'platnost_do' => 'date',
        'predmet_podnikani' => null,
        'pozastaveni_zivnosti' => null,
        'podminky_provozovani_zivnosti' => null,
        'preruseni_zivnosti' => null,
        'zivnost_bez_oz' => null,
        'datum_aktualizace' => 'date',
        'druh_zivnosti' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'datum_vzniku' => 'datumVzniku',
        'datum_zaniku' => 'datumZaniku',
        'platnost_do' => 'platnostDo',
        'predmet_podnikani' => 'predmetPodnikani',
        'pozastaveni_zivnosti' => 'pozastaveniZivnosti',
        'podminky_provozovani_zivnosti' => 'podminkyProvozovaniZivnosti',
        'preruseni_zivnosti' => 'preruseniZivnosti',
        'zivnost_bez_oz' => 'zivnostBezOz',
        'datum_aktualizace' => 'datumAktualizace',
        'druh_zivnosti' => 'druhZivnosti'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'datum_vzniku' => 'setDatumVzniku',
        'datum_zaniku' => 'setDatumZaniku',
        'platnost_do' => 'setPlatnostDo',
        'predmet_podnikani' => 'setPredmetPodnikani',
        'pozastaveni_zivnosti' => 'setPozastaveniZivnosti',
        'podminky_provozovani_zivnosti' => 'setPodminkyProvozovaniZivnosti',
        'preruseni_zivnosti' => 'setPreruseniZivnosti',
        'zivnost_bez_oz' => 'setZivnostBezOz',
        'datum_aktualizace' => 'setDatumAktualizace',
        'druh_zivnosti' => 'setDruhZivnosti'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'datum_vzniku' => 'getDatumVzniku',
        'datum_zaniku' => 'getDatumZaniku',
        'platnost_do' => 'getPlatnostDo',
        'predmet_podnikani' => 'getPredmetPodnikani',
        'pozastaveni_zivnosti' => 'getPozastaveniZivnosti',
        'podminky_provozovani_zivnosti' => 'getPodminkyProvozovaniZivnosti',
        'preruseni_zivnosti' => 'getPreruseniZivnosti',
        'zivnost_bez_oz' => 'getZivnostBezOz',
        'datum_aktualizace' => 'getDatumAktualizace',
        'druh_zivnosti' => 'getDruhZivnosti'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['datum_vzniku'] = isset($data['datum_vzniku']) ? $data['datum_vzniku'] : null;
        $this->container['datum_zaniku'] = isset($data['datum_zaniku']) ? $data['datum_zaniku'] : null;
        $this->container['platnost_do'] = isset($data['platnost_do']) ? $data['platnost_do'] : null;
        $this->container['predmet_podnikani'] = isset($data['predmet_podnikani']) ? $data['predmet_podnikani'] : null;
        $this->container['pozastaveni_zivnosti'] = isset($data['pozastaveni_zivnosti']) ? $data['pozastaveni_zivnosti'] : null;
        $this->container['podminky_provozovani_zivnosti'] = isset($data['podminky_provozovani_zivnosti']) ? $data['podminky_provozovani_zivnosti'] : null;
        $this->container['preruseni_zivnosti'] = isset($data['preruseni_zivnosti']) ? $data['preruseni_zivnosti'] : null;
        $this->container['zivnost_bez_oz'] = isset($data['zivnost_bez_oz']) ? $data['zivnost_bez_oz'] : null;
        $this->container['datum_aktualizace'] = isset($data['datum_aktualizace']) ? $data['datum_aktualizace'] : null;
        $this->container['druh_zivnosti'] = isset($data['druh_zivnosti']) ? $data['druh_zivnosti'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets datum_vzniku
     *
     * @return \DateTime
     */
    public function getDatumVzniku()
    {
        return $this->container['datum_vzniku'];
    }

    /**
     * Sets datum_vzniku
     *
     * @param \DateTime $datum_vzniku Datum vzniku živnosti
     *
     * @return $this
     */
    public function setDatumVzniku($datum_vzniku)
    {
        $this->container['datum_vzniku'] = $datum_vzniku;

        return $this;
    }

    /**
     * Gets datum_zaniku
     *
     * @return \DateTime
     */
    public function getDatumZaniku()
    {
        return $this->container['datum_zaniku'];
    }

    /**
     * Sets datum_zaniku
     *
     * @param \DateTime $datum_zaniku Datum zániku živnosti
     *
     * @return $this
     */
    public function setDatumZaniku($datum_zaniku)
    {
        $this->container['datum_zaniku'] = $datum_zaniku;

        return $this;
    }

    /**
     * Gets platnost_do
     *
     * @return \DateTime
     */
    public function getPlatnostDo()
    {
        return $this->container['platnost_do'];
    }

    /**
     * Sets platnost_do
     *
     * @param \DateTime $platnost_do Platnost živnosti do data
     *
     * @return $this
     */
    public function setPlatnostDo($platnost_do)
    {
        $this->container['platnost_do'] = $platnost_do;

        return $this;
    }

    /**
     * Gets predmet_podnikani
     *
     * @return string
     */
    public function getPredmetPodnikani()
    {
        return $this->container['predmet_podnikani'];
    }

    /**
     * Sets predmet_podnikani
     *
     * @param string $predmet_podnikani Předmět podnikáni živnosti
     *
     * @return $this
     */
    public function setPredmetPodnikani($predmet_podnikani)
    {
        $this->container['predmet_podnikani'] = $predmet_podnikani;

        return $this;
    }

    /**
     * Gets pozastaveni_zivnosti
     *
     * @return \Swagger\Client\Model\ZivnostProvozovnaPozastaveni[]
     */
    public function getPozastaveniZivnosti()
    {
        return $this->container['pozastaveni_zivnosti'];
    }

    /**
     * Sets pozastaveni_zivnosti
     *
     * @param \Swagger\Client\Model\ZivnostProvozovnaPozastaveni[] $pozastaveni_zivnosti pozastaveni_zivnosti
     *
     * @return $this
     */
    public function setPozastaveniZivnosti($pozastaveni_zivnosti)
    {
        $this->container['pozastaveni_zivnosti'] = $pozastaveni_zivnosti;

        return $this;
    }

    /**
     * Gets podminky_provozovani_zivnosti
     *
     * @return \Swagger\Client\Model\ZivnostPodminky[]
     */
    public function getPodminkyProvozovaniZivnosti()
    {
        return $this->container['podminky_provozovani_zivnosti'];
    }

    /**
     * Sets podminky_provozovani_zivnosti
     *
     * @param \Swagger\Client\Model\ZivnostPodminky[] $podminky_provozovani_zivnosti podminky_provozovani_zivnosti
     *
     * @return $this
     */
    public function setPodminkyProvozovaniZivnosti($podminky_provozovani_zivnosti)
    {
        $this->container['podminky_provozovani_zivnosti'] = $podminky_provozovani_zivnosti;

        return $this;
    }

    /**
     * Gets preruseni_zivnosti
     *
     * @return \Swagger\Client\Model\ZivnostPreruseni[]
     */
    public function getPreruseniZivnosti()
    {
        return $this->container['preruseni_zivnosti'];
    }

    /**
     * Sets preruseni_zivnosti
     *
     * @param \Swagger\Client\Model\ZivnostPreruseni[] $preruseni_zivnosti preruseni_zivnosti
     *
     * @return $this
     */
    public function setPreruseniZivnosti($preruseni_zivnosti)
    {
        $this->container['preruseni_zivnosti'] = $preruseni_zivnosti;

        return $this;
    }

    /**
     * Gets zivnost_bez_oz
     *
     * @return \Swagger\Client\Model\ZivnostBezOZ[]
     */
    public function getZivnostBezOz()
    {
        return $this->container['zivnost_bez_oz'];
    }

    /**
     * Sets zivnost_bez_oz
     *
     * @param \Swagger\Client\Model\ZivnostBezOZ[] $zivnost_bez_oz zivnost_bez_oz
     *
     * @return $this
     */
    public function setZivnostBezOz($zivnost_bez_oz)
    {
        $this->container['zivnost_bez_oz'] = $zivnost_bez_oz;

        return $this;
    }

    /**
     * Gets datum_aktualizace
     *
     * @return \DateTime
     */
    public function getDatumAktualizace()
    {
        return $this->container['datum_aktualizace'];
    }

    /**
     * Sets datum_aktualizace
     *
     * @param \DateTime $datum_aktualizace Datum aktualizace záznamu
     *
     * @return $this
     */
    public function setDatumAktualizace($datum_aktualizace)
    {
        $this->container['datum_aktualizace'] = $datum_aktualizace;

        return $this;
    }

    /**
     * Gets druh_zivnosti
     *
     * @return string
     */
    public function getDruhZivnosti()
    {
        return $this->container['druh_zivnosti'];
    }

    /**
     * Sets druh_zivnosti
     *
     * @param string $druh_zivnosti Druh živnosti - kód (ciselnikKod: DruhZivnosti)
     *
     * @return $this
     */
    public function setDruhZivnosti($druh_zivnosti)
    {
        $this->container['druh_zivnosti'] = $druh_zivnosti;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
