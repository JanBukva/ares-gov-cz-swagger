<?php
/**
 * ZaznamRcnsZaklad
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.58
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ZaznamRcnsZaklad Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZaznamRcnsZaklad extends EkonomickySubjektZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZaznamRcnsZaklad';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'typ_subjektu' => 'string',
        'stat' => 'string',
        'primarni_zaznam' => 'bool',
        'registrace' => '\Swagger\Client\Model\RegistraceRcns',
        'zpusob_jednani' => '\Swagger\Client\Model\ZpusobJednani[]',
        'adresy_subjektu' => '\Swagger\Client\Model\AdresaRcns[]',
        'zdroj_id' => 'string',
        'platnost_od' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'typ_subjektu' => null,
        'stat' => null,
        'primarni_zaznam' => null,
        'registrace' => null,
        'zpusob_jednani' => null,
        'adresy_subjektu' => null,
        'zdroj_id' => null,
        'platnost_od' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'typ_subjektu' => 'typSubjektu',
        'stat' => 'stat',
        'primarni_zaznam' => 'primarniZaznam',
        'registrace' => 'registrace',
        'zpusob_jednani' => 'zpusobJednani',
        'adresy_subjektu' => 'adresySubjektu',
        'zdroj_id' => 'zdrojId',
        'platnost_od' => 'platnostOd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'typ_subjektu' => 'setTypSubjektu',
        'stat' => 'setStat',
        'primarni_zaznam' => 'setPrimarniZaznam',
        'registrace' => 'setRegistrace',
        'zpusob_jednani' => 'setZpusobJednani',
        'adresy_subjektu' => 'setAdresySubjektu',
        'zdroj_id' => 'setZdrojId',
        'platnost_od' => 'setPlatnostOd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'typ_subjektu' => 'getTypSubjektu',
        'stat' => 'getStat',
        'primarni_zaznam' => 'getPrimarniZaznam',
        'registrace' => 'getRegistrace',
        'zpusob_jednani' => 'getZpusobJednani',
        'adresy_subjektu' => 'getAdresySubjektu',
        'zdroj_id' => 'getZdrojId',
        'platnost_od' => 'getPlatnostOd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['typ_subjektu'] = isset($data['typ_subjektu']) ? $data['typ_subjektu'] : null;
        $this->container['stat'] = isset($data['stat']) ? $data['stat'] : null;
        $this->container['primarni_zaznam'] = isset($data['primarni_zaznam']) ? $data['primarni_zaznam'] : null;
        $this->container['registrace'] = isset($data['registrace']) ? $data['registrace'] : null;
        $this->container['zpusob_jednani'] = isset($data['zpusob_jednani']) ? $data['zpusob_jednani'] : null;
        $this->container['adresy_subjektu'] = isset($data['adresy_subjektu']) ? $data['adresy_subjektu'] : null;
        $this->container['zdroj_id'] = isset($data['zdroj_id']) ? $data['zdroj_id'] : null;
        $this->container['platnost_od'] = isset($data['platnost_od']) ? $data['platnost_od'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets typ_subjektu
     *
     * @return string
     */
    public function getTypSubjektu()
    {
        return $this->container['typ_subjektu'];
    }

    /**
     * Sets typ_subjektu
     *
     * @param string $typ_subjektu Typ subjektu - kód (ciselnikKod: TypSubjektuRcns)
     *
     * @return $this
     */
    public function setTypSubjektu($typ_subjektu)
    {
        $this->container['typ_subjektu'] = $typ_subjektu;

        return $this;
    }

    /**
     * Gets stat
     *
     * @return string
     */
    public function getStat()
    {
        return $this->container['stat'];
    }

    /**
     * Sets stat
     *
     * @param string $stat stat
     *
     * @return $this
     */
    public function setStat($stat)
    {
        $this->container['stat'] = $stat;

        return $this;
    }

    /**
     * Gets primarni_zaznam
     *
     * @return bool
     */
    public function getPrimarniZaznam()
    {
        return $this->container['primarni_zaznam'];
    }

    /**
     * Sets primarni_zaznam
     *
     * @param bool $primarni_zaznam primarni_zaznam
     *
     * @return $this
     */
    public function setPrimarniZaznam($primarni_zaznam)
    {
        $this->container['primarni_zaznam'] = $primarni_zaznam;

        return $this;
    }

    /**
     * Gets registrace
     *
     * @return \Swagger\Client\Model\RegistraceRcns
     */
    public function getRegistrace()
    {
        return $this->container['registrace'];
    }

    /**
     * Sets registrace
     *
     * @param \Swagger\Client\Model\RegistraceRcns $registrace registrace
     *
     * @return $this
     */
    public function setRegistrace($registrace)
    {
        $this->container['registrace'] = $registrace;

        return $this;
    }

    /**
     * Gets zpusob_jednani
     *
     * @return \Swagger\Client\Model\ZpusobJednani[]
     */
    public function getZpusobJednani()
    {
        return $this->container['zpusob_jednani'];
    }

    /**
     * Sets zpusob_jednani
     *
     * @param \Swagger\Client\Model\ZpusobJednani[] $zpusob_jednani zpusob_jednani
     *
     * @return $this
     */
    public function setZpusobJednani($zpusob_jednani)
    {
        $this->container['zpusob_jednani'] = $zpusob_jednani;

        return $this;
    }

    /**
     * Gets adresy_subjektu
     *
     * @return \Swagger\Client\Model\AdresaRcns[]
     */
    public function getAdresySubjektu()
    {
        return $this->container['adresy_subjektu'];
    }

    /**
     * Sets adresy_subjektu
     *
     * @param \Swagger\Client\Model\AdresaRcns[] $adresy_subjektu adresy_subjektu
     *
     * @return $this
     */
    public function setAdresySubjektu($adresy_subjektu)
    {
        $this->container['adresy_subjektu'] = $adresy_subjektu;

        return $this;
    }

    /**
     * Gets zdroj_id
     *
     * @return string
     */
    public function getZdrojId()
    {
        return $this->container['zdroj_id'];
    }

    /**
     * Sets zdroj_id
     *
     * @param string $zdroj_id Identifikátor záznamu ve zdrojovém registru.
     *
     * @return $this
     */
    public function setZdrojId($zdroj_id)
    {
        $this->container['zdroj_id'] = $zdroj_id;

        return $this;
    }

    /**
     * Gets platnost_od
     *
     * @return \DateTime
     */
    public function getPlatnostOd()
    {
        return $this->container['platnost_od'];
    }

    /**
     * Sets platnost_od
     *
     * @param \DateTime $platnost_od Platnost subjekt v registru od
     *
     * @return $this
     */
    public function setPlatnostOd($platnost_od)
    {
        $this->container['platnost_od'] = $platnost_od;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
