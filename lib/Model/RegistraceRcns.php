<?php
/**
 * RegistraceRcns
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RegistraceRcns Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegistraceRcns implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RegistraceRcns';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cislo_registrace' => 'string',
        'cislo_zruseni_registrace' => 'string',
        'datum_likvidace' => '\DateTime',
        'datum_konkurzu' => '\DateTime',
        'datum_opatrovnik' => '\DateTime',
        'datum_zruseni_registrace' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cislo_registrace' => null,
        'cislo_zruseni_registrace' => null,
        'datum_likvidace' => 'date',
        'datum_konkurzu' => 'date',
        'datum_opatrovnik' => 'date',
        'datum_zruseni_registrace' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cislo_registrace' => 'cisloRegistrace',
        'cislo_zruseni_registrace' => 'cisloZruseniRegistrace',
        'datum_likvidace' => 'datumLikvidace',
        'datum_konkurzu' => 'datumKonkurzu',
        'datum_opatrovnik' => 'datumOpatrovnik',
        'datum_zruseni_registrace' => 'datumZruseniRegistrace'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cislo_registrace' => 'setCisloRegistrace',
        'cislo_zruseni_registrace' => 'setCisloZruseniRegistrace',
        'datum_likvidace' => 'setDatumLikvidace',
        'datum_konkurzu' => 'setDatumKonkurzu',
        'datum_opatrovnik' => 'setDatumOpatrovnik',
        'datum_zruseni_registrace' => 'setDatumZruseniRegistrace'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cislo_registrace' => 'getCisloRegistrace',
        'cislo_zruseni_registrace' => 'getCisloZruseniRegistrace',
        'datum_likvidace' => 'getDatumLikvidace',
        'datum_konkurzu' => 'getDatumKonkurzu',
        'datum_opatrovnik' => 'getDatumOpatrovnik',
        'datum_zruseni_registrace' => 'getDatumZruseniRegistrace'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cislo_registrace'] = isset($data['cislo_registrace']) ? $data['cislo_registrace'] : null;
        $this->container['cislo_zruseni_registrace'] = isset($data['cislo_zruseni_registrace']) ? $data['cislo_zruseni_registrace'] : null;
        $this->container['datum_likvidace'] = isset($data['datum_likvidace']) ? $data['datum_likvidace'] : null;
        $this->container['datum_konkurzu'] = isset($data['datum_konkurzu']) ? $data['datum_konkurzu'] : null;
        $this->container['datum_opatrovnik'] = isset($data['datum_opatrovnik']) ? $data['datum_opatrovnik'] : null;
        $this->container['datum_zruseni_registrace'] = isset($data['datum_zruseni_registrace']) ? $data['datum_zruseni_registrace'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cislo_registrace
     *
     * @return string
     */
    public function getCisloRegistrace()
    {
        return $this->container['cislo_registrace'];
    }

    /**
     * Sets cislo_registrace
     *
     * @param string $cislo_registrace Pro subjekt typu církev a svaz církví je zde uvedeno registrační číslo pod kterým byl daný subjekt zaregistrován na MK. Pro subjekty typu právnická osoba je zde uvedeno evidenční číslo pod kterým byl daný subjekt zaevidován na MK.
     *
     * @return $this
     */
    public function setCisloRegistrace($cislo_registrace)
    {
        $this->container['cislo_registrace'] = $cislo_registrace;

        return $this;
    }

    /**
     * Gets cislo_zruseni_registrace
     *
     * @return string
     */
    public function getCisloZruseniRegistrace()
    {
        return $this->container['cislo_zruseni_registrace'];
    }

    /**
     * Sets cislo_zruseni_registrace
     *
     * @param string $cislo_zruseni_registrace Datum zrušení registrace, evidence subjektu na MK
     *
     * @return $this
     */
    public function setCisloZruseniRegistrace($cislo_zruseni_registrace)
    {
        $this->container['cislo_zruseni_registrace'] = $cislo_zruseni_registrace;

        return $this;
    }

    /**
     * Gets datum_likvidace
     *
     * @return \DateTime
     */
    public function getDatumLikvidace()
    {
        return $this->container['datum_likvidace'];
    }

    /**
     * Sets datum_likvidace
     *
     * @param \DateTime $datum_likvidace Datum vyhlášení likvidace subjektu
     *
     * @return $this
     */
    public function setDatumLikvidace($datum_likvidace)
    {
        $this->container['datum_likvidace'] = $datum_likvidace;

        return $this;
    }

    /**
     * Gets datum_konkurzu
     *
     * @return \DateTime
     */
    public function getDatumKonkurzu()
    {
        return $this->container['datum_konkurzu'];
    }

    /**
     * Sets datum_konkurzu
     *
     * @param \DateTime $datum_konkurzu Datum vyhlášení konkurzu subjektu
     *
     * @return $this
     */
    public function setDatumKonkurzu($datum_konkurzu)
    {
        $this->container['datum_konkurzu'] = $datum_konkurzu;

        return $this;
    }

    /**
     * Gets datum_opatrovnik
     *
     * @return \DateTime
     */
    public function getDatumOpatrovnik()
    {
        return $this->container['datum_opatrovnik'];
    }

    /**
     * Sets datum_opatrovnik
     *
     * @param \DateTime $datum_opatrovnik Datum jmenování opatrovníka
     *
     * @return $this
     */
    public function setDatumOpatrovnik($datum_opatrovnik)
    {
        $this->container['datum_opatrovnik'] = $datum_opatrovnik;

        return $this;
    }

    /**
     * Gets datum_zruseni_registrace
     *
     * @return \DateTime
     */
    public function getDatumZruseniRegistrace()
    {
        return $this->container['datum_zruseni_registrace'];
    }

    /**
     * Sets datum_zruseni_registrace
     *
     * @param \DateTime $datum_zruseni_registrace Datum zrušení registrace, evidence subjektu na MK
     *
     * @return $this
     */
    public function setDatumZruseniRegistrace($datum_zruseni_registrace)
    {
        $this->container['datum_zruseni_registrace'] = $datum_zruseni_registrace;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
