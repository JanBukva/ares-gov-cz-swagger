<?php
/**
 * ZaznamRzpZaklad
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.58
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ZaznamRzpZaklad Class Doc Comment
 *
 * @category Class
 * @description Detailní informace o ekonomickém subjektu ze zdroje RŽP
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZaznamRzpZaklad extends EkonomickySubjektZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZaznamRzpZaklad';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'insolvencni_rizeni' => '\Swagger\Client\Model\InsolvencniRizeni',
        'datum_doruceni_vypisu' => '\DateTime',
        'adresy_subjektu' => '\Swagger\Client\Model\EkonomickySubjektRzpAdresa[]',
        'typ_subjektu' => 'string',
        'zivnostensky_urad' => 'string',
        'organizacni_slozka' => 'string',
        'zivnosti_stav' => '\Swagger\Client\Model\ZivnostiRzpStav',
        'datum_zapisu_vr' => '\DateTime',
        'provozovny_stav' => '\Swagger\Client\Model\ProvozovnyRzpStav',
        'primarni_zaznam' => 'bool',
        'kod_statu' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'insolvencni_rizeni' => null,
        'datum_doruceni_vypisu' => 'date',
        'adresy_subjektu' => null,
        'typ_subjektu' => null,
        'zivnostensky_urad' => null,
        'organizacni_slozka' => null,
        'zivnosti_stav' => null,
        'datum_zapisu_vr' => 'date',
        'provozovny_stav' => null,
        'primarni_zaznam' => null,
        'kod_statu' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'insolvencni_rizeni' => 'insolvencniRizeni',
        'datum_doruceni_vypisu' => 'datumDoruceniVypisu',
        'adresy_subjektu' => 'adresySubjektu',
        'typ_subjektu' => 'typSubjektu',
        'zivnostensky_urad' => 'zivnostenskyUrad',
        'organizacni_slozka' => 'organizacniSlozka',
        'zivnosti_stav' => 'zivnostiStav',
        'datum_zapisu_vr' => 'datumZapisuVr',
        'provozovny_stav' => 'provozovnyStav',
        'primarni_zaznam' => 'primarniZaznam',
        'kod_statu' => 'kodStatu'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'insolvencni_rizeni' => 'setInsolvencniRizeni',
        'datum_doruceni_vypisu' => 'setDatumDoruceniVypisu',
        'adresy_subjektu' => 'setAdresySubjektu',
        'typ_subjektu' => 'setTypSubjektu',
        'zivnostensky_urad' => 'setZivnostenskyUrad',
        'organizacni_slozka' => 'setOrganizacniSlozka',
        'zivnosti_stav' => 'setZivnostiStav',
        'datum_zapisu_vr' => 'setDatumZapisuVr',
        'provozovny_stav' => 'setProvozovnyStav',
        'primarni_zaznam' => 'setPrimarniZaznam',
        'kod_statu' => 'setKodStatu'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'insolvencni_rizeni' => 'getInsolvencniRizeni',
        'datum_doruceni_vypisu' => 'getDatumDoruceniVypisu',
        'adresy_subjektu' => 'getAdresySubjektu',
        'typ_subjektu' => 'getTypSubjektu',
        'zivnostensky_urad' => 'getZivnostenskyUrad',
        'organizacni_slozka' => 'getOrganizacniSlozka',
        'zivnosti_stav' => 'getZivnostiStav',
        'datum_zapisu_vr' => 'getDatumZapisuVr',
        'provozovny_stav' => 'getProvozovnyStav',
        'primarni_zaznam' => 'getPrimarniZaznam',
        'kod_statu' => 'getKodStatu'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['insolvencni_rizeni'] = isset($data['insolvencni_rizeni']) ? $data['insolvencni_rizeni'] : null;
        $this->container['datum_doruceni_vypisu'] = isset($data['datum_doruceni_vypisu']) ? $data['datum_doruceni_vypisu'] : null;
        $this->container['adresy_subjektu'] = isset($data['adresy_subjektu']) ? $data['adresy_subjektu'] : null;
        $this->container['typ_subjektu'] = isset($data['typ_subjektu']) ? $data['typ_subjektu'] : null;
        $this->container['zivnostensky_urad'] = isset($data['zivnostensky_urad']) ? $data['zivnostensky_urad'] : null;
        $this->container['organizacni_slozka'] = isset($data['organizacni_slozka']) ? $data['organizacni_slozka'] : null;
        $this->container['zivnosti_stav'] = isset($data['zivnosti_stav']) ? $data['zivnosti_stav'] : null;
        $this->container['datum_zapisu_vr'] = isset($data['datum_zapisu_vr']) ? $data['datum_zapisu_vr'] : null;
        $this->container['provozovny_stav'] = isset($data['provozovny_stav']) ? $data['provozovny_stav'] : null;
        $this->container['primarni_zaznam'] = isset($data['primarni_zaznam']) ? $data['primarni_zaznam'] : null;
        $this->container['kod_statu'] = isset($data['kod_statu']) ? $data['kod_statu'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets insolvencni_rizeni
     *
     * @return \Swagger\Client\Model\InsolvencniRizeni
     */
    public function getInsolvencniRizeni()
    {
        return $this->container['insolvencni_rizeni'];
    }

    /**
     * Sets insolvencni_rizeni
     *
     * @param \Swagger\Client\Model\InsolvencniRizeni $insolvencni_rizeni insolvencni_rizeni
     *
     * @return $this
     */
    public function setInsolvencniRizeni($insolvencni_rizeni)
    {
        $this->container['insolvencni_rizeni'] = $insolvencni_rizeni;

        return $this;
    }

    /**
     * Gets datum_doruceni_vypisu
     *
     * @return \DateTime
     */
    public function getDatumDoruceniVypisu()
    {
        return $this->container['datum_doruceni_vypisu'];
    }

    /**
     * Sets datum_doruceni_vypisu
     *
     * @param \DateTime $datum_doruceni_vypisu Datum doručení prvního výpisu sloužícího jako průkaz živnostenského podnikání,
     *
     * @return $this
     */
    public function setDatumDoruceniVypisu($datum_doruceni_vypisu)
    {
        $this->container['datum_doruceni_vypisu'] = $datum_doruceni_vypisu;

        return $this;
    }

    /**
     * Gets adresy_subjektu
     *
     * @return \Swagger\Client\Model\EkonomickySubjektRzpAdresa[]
     */
    public function getAdresySubjektu()
    {
        return $this->container['adresy_subjektu'];
    }

    /**
     * Sets adresy_subjektu
     *
     * @param \Swagger\Client\Model\EkonomickySubjektRzpAdresa[] $adresy_subjektu adresy_subjektu
     *
     * @return $this
     */
    public function setAdresySubjektu($adresy_subjektu)
    {
        $this->container['adresy_subjektu'] = $adresy_subjektu;

        return $this;
    }

    /**
     * Gets typ_subjektu
     *
     * @return string
     */
    public function getTypSubjektu()
    {
        return $this->container['typ_subjektu'];
    }

    /**
     * Sets typ_subjektu
     *
     * @param string $typ_subjektu Typ subjektu - kód (ciselnikKod: TypSubjektu, zdroj: rzp)
     *
     * @return $this
     */
    public function setTypSubjektu($typ_subjektu)
    {
        $this->container['typ_subjektu'] = $typ_subjektu;

        return $this;
    }

    /**
     * Gets zivnostensky_urad
     *
     * @return string
     */
    public function getZivnostenskyUrad()
    {
        return $this->container['zivnostensky_urad'];
    }

    /**
     * Sets zivnostensky_urad
     *
     * @param string $zivnostensky_urad Živnostenský úřadu - kód
     *
     * @return $this
     */
    public function setZivnostenskyUrad($zivnostensky_urad)
    {
        $this->container['zivnostensky_urad'] = $zivnostensky_urad;

        return $this;
    }

    /**
     * Gets organizacni_slozka
     *
     * @return string
     */
    public function getOrganizacniSlozka()
    {
        return $this->container['organizacni_slozka'];
    }

    /**
     * Sets organizacni_slozka
     *
     * @param string $organizacni_slozka Název organizační složky
     *
     * @return $this
     */
    public function setOrganizacniSlozka($organizacni_slozka)
    {
        $this->container['organizacni_slozka'] = $organizacni_slozka;

        return $this;
    }

    /**
     * Gets zivnosti_stav
     *
     * @return \Swagger\Client\Model\ZivnostiRzpStav
     */
    public function getZivnostiStav()
    {
        return $this->container['zivnosti_stav'];
    }

    /**
     * Sets zivnosti_stav
     *
     * @param \Swagger\Client\Model\ZivnostiRzpStav $zivnosti_stav zivnosti_stav
     *
     * @return $this
     */
    public function setZivnostiStav($zivnosti_stav)
    {
        $this->container['zivnosti_stav'] = $zivnosti_stav;

        return $this;
    }

    /**
     * Gets datum_zapisu_vr
     *
     * @return \DateTime
     */
    public function getDatumZapisuVr()
    {
        return $this->container['datum_zapisu_vr'];
    }

    /**
     * Sets datum_zapisu_vr
     *
     * @param \DateTime $datum_zapisu_vr Datum zápisu do Obchodního nebo podobného rejstříku
     *
     * @return $this
     */
    public function setDatumZapisuVr($datum_zapisu_vr)
    {
        $this->container['datum_zapisu_vr'] = $datum_zapisu_vr;

        return $this;
    }

    /**
     * Gets provozovny_stav
     *
     * @return \Swagger\Client\Model\ProvozovnyRzpStav
     */
    public function getProvozovnyStav()
    {
        return $this->container['provozovny_stav'];
    }

    /**
     * Sets provozovny_stav
     *
     * @param \Swagger\Client\Model\ProvozovnyRzpStav $provozovny_stav provozovny_stav
     *
     * @return $this
     */
    public function setProvozovnyStav($provozovny_stav)
    {
        $this->container['provozovny_stav'] = $provozovny_stav;

        return $this;
    }

    /**
     * Gets primarni_zaznam
     *
     * @return bool
     */
    public function getPrimarniZaznam()
    {
        return $this->container['primarni_zaznam'];
    }

    /**
     * Sets primarni_zaznam
     *
     * @param bool $primarni_zaznam Identifikace primárního záznamu  pozn.: U multiplicitních registrací je pouze jedna registrace primární
     *
     * @return $this
     */
    public function setPrimarniZaznam($primarni_zaznam)
    {
        $this->container['primarni_zaznam'] = $primarni_zaznam;

        return $this;
    }

    /**
     * Gets kod_statu
     *
     * @return string
     */
    public function getKodStatu()
    {
        return $this->container['kod_statu'];
    }

    /**
     * Sets kod_statu
     *
     * @param string $kod_statu Kód státu  (ciselnikKod: Stat, zdroj:com)
     *
     * @return $this
     */
    public function setKodStatu($kod_statu)
    {
        $this->container['kod_statu'] = $kod_statu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
