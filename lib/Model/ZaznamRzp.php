<?php
/**
 * ZaznamRzp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.58
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ZaznamRzp Class Doc Comment
 *
 * @category Class
 * @description Detailní informace o ekonomickém subjektu ze zdroje RŽP
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZaznamRzp extends ZaznamRzpZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZaznamRzp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'souvisejici_subjekty' => '\Swagger\Client\Model\AngazovanySubjektRzp[]',
        'osoba_podnikatel' => '\Swagger\Client\Model\AngazovanaOsobaRzp',
        'angazovane_osoby' => '\Swagger\Client\Model\AngazovanaOsobaRzp[]',
        'zivnosti' => '\Swagger\Client\Model\Zivnost[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'souvisejici_subjekty' => null,
        'osoba_podnikatel' => null,
        'angazovane_osoby' => null,
        'zivnosti' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'souvisejici_subjekty' => 'souvisejiciSubjekty',
        'osoba_podnikatel' => 'osobaPodnikatel',
        'angazovane_osoby' => 'angazovaneOsoby',
        'zivnosti' => 'zivnosti'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'souvisejici_subjekty' => 'setSouvisejiciSubjekty',
        'osoba_podnikatel' => 'setOsobaPodnikatel',
        'angazovane_osoby' => 'setAngazovaneOsoby',
        'zivnosti' => 'setZivnosti'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'souvisejici_subjekty' => 'getSouvisejiciSubjekty',
        'osoba_podnikatel' => 'getOsobaPodnikatel',
        'angazovane_osoby' => 'getAngazovaneOsoby',
        'zivnosti' => 'getZivnosti'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['souvisejici_subjekty'] = isset($data['souvisejici_subjekty']) ? $data['souvisejici_subjekty'] : null;
        $this->container['osoba_podnikatel'] = isset($data['osoba_podnikatel']) ? $data['osoba_podnikatel'] : null;
        $this->container['angazovane_osoby'] = isset($data['angazovane_osoby']) ? $data['angazovane_osoby'] : null;
        $this->container['zivnosti'] = isset($data['zivnosti']) ? $data['zivnosti'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets souvisejici_subjekty
     *
     * @return \Swagger\Client\Model\AngazovanySubjektRzp[]
     */
    public function getSouvisejiciSubjekty()
    {
        return $this->container['souvisejici_subjekty'];
    }

    /**
     * Sets souvisejici_subjekty
     *
     * @param \Swagger\Client\Model\AngazovanySubjektRzp[] $souvisejici_subjekty souvisejici_subjekty
     *
     * @return $this
     */
    public function setSouvisejiciSubjekty($souvisejici_subjekty)
    {
        $this->container['souvisejici_subjekty'] = $souvisejici_subjekty;

        return $this;
    }

    /**
     * Gets osoba_podnikatel
     *
     * @return \Swagger\Client\Model\AngazovanaOsobaRzp
     */
    public function getOsobaPodnikatel()
    {
        return $this->container['osoba_podnikatel'];
    }

    /**
     * Sets osoba_podnikatel
     *
     * @param \Swagger\Client\Model\AngazovanaOsobaRzp $osoba_podnikatel osoba_podnikatel
     *
     * @return $this
     */
    public function setOsobaPodnikatel($osoba_podnikatel)
    {
        $this->container['osoba_podnikatel'] = $osoba_podnikatel;

        return $this;
    }

    /**
     * Gets angazovane_osoby
     *
     * @return \Swagger\Client\Model\AngazovanaOsobaRzp[]
     */
    public function getAngazovaneOsoby()
    {
        return $this->container['angazovane_osoby'];
    }

    /**
     * Sets angazovane_osoby
     *
     * @param \Swagger\Client\Model\AngazovanaOsobaRzp[] $angazovane_osoby angazovane_osoby
     *
     * @return $this
     */
    public function setAngazovaneOsoby($angazovane_osoby)
    {
        $this->container['angazovane_osoby'] = $angazovane_osoby;

        return $this;
    }

    /**
     * Gets zivnosti
     *
     * @return \Swagger\Client\Model\Zivnost[]
     */
    public function getZivnosti()
    {
        return $this->container['zivnosti'];
    }

    /**
     * Sets zivnosti
     *
     * @param \Swagger\Client\Model\Zivnost[] $zivnosti zivnosti
     *
     * @return $this
     */
    public function setZivnosti($zivnosti)
    {
        $this->container['zivnosti'] = $zivnosti;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
