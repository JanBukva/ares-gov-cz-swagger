<?php
/**
 * ProvozovnaZaklad
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.58
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProvozovnaZaklad Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProvozovnaZaklad implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProvozovnaZaklad';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'icp' => 'int',
        'sidlo_provozovny' => '\Swagger\Client\Model\Adresa',
        'umisteni_provozovny' => 'string',
        'platnost_od' => '\DateTime',
        'platnost_do' => '\DateTime',
        'pozastaveni_provozovny' => '\Swagger\Client\Model\ZivnostProvozovnaPozastaveni[]',
        'typ_provozovny' => 'string',
        'nazev' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'icp' => null,
        'sidlo_provozovny' => null,
        'umisteni_provozovny' => null,
        'platnost_od' => 'date',
        'platnost_do' => 'date',
        'pozastaveni_provozovny' => null,
        'typ_provozovny' => null,
        'nazev' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icp' => 'icp',
        'sidlo_provozovny' => 'sidloProvozovny',
        'umisteni_provozovny' => 'umisteniProvozovny',
        'platnost_od' => 'platnostOd',
        'platnost_do' => 'platnostDo',
        'pozastaveni_provozovny' => 'pozastaveniProvozovny',
        'typ_provozovny' => 'typProvozovny',
        'nazev' => 'nazev'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icp' => 'setIcp',
        'sidlo_provozovny' => 'setSidloProvozovny',
        'umisteni_provozovny' => 'setUmisteniProvozovny',
        'platnost_od' => 'setPlatnostOd',
        'platnost_do' => 'setPlatnostDo',
        'pozastaveni_provozovny' => 'setPozastaveniProvozovny',
        'typ_provozovny' => 'setTypProvozovny',
        'nazev' => 'setNazev'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icp' => 'getIcp',
        'sidlo_provozovny' => 'getSidloProvozovny',
        'umisteni_provozovny' => 'getUmisteniProvozovny',
        'platnost_od' => 'getPlatnostOd',
        'platnost_do' => 'getPlatnostDo',
        'pozastaveni_provozovny' => 'getPozastaveniProvozovny',
        'typ_provozovny' => 'getTypProvozovny',
        'nazev' => 'getNazev'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['icp'] = isset($data['icp']) ? $data['icp'] : null;
        $this->container['sidlo_provozovny'] = isset($data['sidlo_provozovny']) ? $data['sidlo_provozovny'] : null;
        $this->container['umisteni_provozovny'] = isset($data['umisteni_provozovny']) ? $data['umisteni_provozovny'] : null;
        $this->container['platnost_od'] = isset($data['platnost_od']) ? $data['platnost_od'] : null;
        $this->container['platnost_do'] = isset($data['platnost_do']) ? $data['platnost_do'] : null;
        $this->container['pozastaveni_provozovny'] = isset($data['pozastaveni_provozovny']) ? $data['pozastaveni_provozovny'] : null;
        $this->container['typ_provozovny'] = isset($data['typ_provozovny']) ? $data['typ_provozovny'] : null;
        $this->container['nazev'] = isset($data['nazev']) ? $data['nazev'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icp
     *
     * @return int
     */
    public function getIcp()
    {
        return $this->container['icp'];
    }

    /**
     * Sets icp
     *
     * @param int $icp identifikační číslo provozovny
     *
     * @return $this
     */
    public function setIcp($icp)
    {
        $this->container['icp'] = $icp;

        return $this;
    }

    /**
     * Gets sidlo_provozovny
     *
     * @return \Swagger\Client\Model\Adresa
     */
    public function getSidloProvozovny()
    {
        return $this->container['sidlo_provozovny'];
    }

    /**
     * Sets sidlo_provozovny
     *
     * @param \Swagger\Client\Model\Adresa $sidlo_provozovny sidlo_provozovny
     *
     * @return $this
     */
    public function setSidloProvozovny($sidlo_provozovny)
    {
        $this->container['sidlo_provozovny'] = $sidlo_provozovny;

        return $this;
    }

    /**
     * Gets umisteni_provozovny
     *
     * @return string
     */
    public function getUmisteniProvozovny()
    {
        return $this->container['umisteni_provozovny'];
    }

    /**
     * Sets umisteni_provozovny
     *
     * @param string $umisteni_provozovny Umístění provozovny
     *
     * @return $this
     */
    public function setUmisteniProvozovny($umisteni_provozovny)
    {
        $this->container['umisteni_provozovny'] = $umisteni_provozovny;

        return $this;
    }

    /**
     * Gets platnost_od
     *
     * @return \DateTime
     */
    public function getPlatnostOd()
    {
        return $this->container['platnost_od'];
    }

    /**
     * Sets platnost_od
     *
     * @param \DateTime $platnost_od Platnost provozovny od data
     *
     * @return $this
     */
    public function setPlatnostOd($platnost_od)
    {
        $this->container['platnost_od'] = $platnost_od;

        return $this;
    }

    /**
     * Gets platnost_do
     *
     * @return \DateTime
     */
    public function getPlatnostDo()
    {
        return $this->container['platnost_do'];
    }

    /**
     * Sets platnost_do
     *
     * @param \DateTime $platnost_do Platnost provozovny do data
     *
     * @return $this
     */
    public function setPlatnostDo($platnost_do)
    {
        $this->container['platnost_do'] = $platnost_do;

        return $this;
    }

    /**
     * Gets pozastaveni_provozovny
     *
     * @return \Swagger\Client\Model\ZivnostProvozovnaPozastaveni[]
     */
    public function getPozastaveniProvozovny()
    {
        return $this->container['pozastaveni_provozovny'];
    }

    /**
     * Sets pozastaveni_provozovny
     *
     * @param \Swagger\Client\Model\ZivnostProvozovnaPozastaveni[] $pozastaveni_provozovny pozastaveni_provozovny
     *
     * @return $this
     */
    public function setPozastaveniProvozovny($pozastaveni_provozovny)
    {
        $this->container['pozastaveni_provozovny'] = $pozastaveni_provozovny;

        return $this;
    }

    /**
     * Gets typ_provozovny
     *
     * @return string
     */
    public function getTypProvozovny()
    {
        return $this->container['typ_provozovny'];
    }

    /**
     * Sets typ_provozovny
     *
     * @param string $typ_provozovny Typ provozovny - kód (ciselnikKod: TypProvozovny)
     *
     * @return $this
     */
    public function setTypProvozovny($typ_provozovny)
    {
        $this->container['typ_provozovny'] = $typ_provozovny;

        return $this;
    }

    /**
     * Gets nazev
     *
     * @return string
     */
    public function getNazev()
    {
        return $this->container['nazev'];
    }

    /**
     * Sets nazev
     *
     * @param string $nazev Název provozovny
     *
     * @return $this
     */
    public function setNazev($nazev)
    {
        $this->container['nazev'] = $nazev;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
