<?php
/**
 * ZaznamNrpzs
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ZaznamNrpzs Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZaznamNrpzs extends EkonomickySubjektZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZaznamNrpzs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'poradove_cislo_zar' => 'string',
        'poradove_cislo_prac' => 'string',
        'typ_subjektu' => 'string',
        'druh_zarizeni' => 'string',
        'primarni_zaznam' => 'bool',
        'typ_zrizovatele' => 'string',
        'angazovane_osoby' => '\Swagger\Client\Model\AngazovanaOsobaNrpzs[]',
        'kontakty' => '\Swagger\Client\Model\Kontakty'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'poradove_cislo_zar' => null,
        'poradove_cislo_prac' => null,
        'typ_subjektu' => null,
        'druh_zarizeni' => null,
        'primarni_zaznam' => null,
        'typ_zrizovatele' => null,
        'angazovane_osoby' => null,
        'kontakty' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'poradove_cislo_zar' => 'poradoveCisloZar',
        'poradove_cislo_prac' => 'poradoveCisloPrac',
        'typ_subjektu' => 'typSubjektu',
        'druh_zarizeni' => 'druhZarizeni',
        'primarni_zaznam' => 'primarniZaznam',
        'typ_zrizovatele' => 'typZrizovatele',
        'angazovane_osoby' => 'angazovaneOsoby',
        'kontakty' => 'kontakty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'poradove_cislo_zar' => 'setPoradoveCisloZar',
        'poradove_cislo_prac' => 'setPoradoveCisloPrac',
        'typ_subjektu' => 'setTypSubjektu',
        'druh_zarizeni' => 'setDruhZarizeni',
        'primarni_zaznam' => 'setPrimarniZaznam',
        'typ_zrizovatele' => 'setTypZrizovatele',
        'angazovane_osoby' => 'setAngazovaneOsoby',
        'kontakty' => 'setKontakty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'poradove_cislo_zar' => 'getPoradoveCisloZar',
        'poradove_cislo_prac' => 'getPoradoveCisloPrac',
        'typ_subjektu' => 'getTypSubjektu',
        'druh_zarizeni' => 'getDruhZarizeni',
        'primarni_zaznam' => 'getPrimarniZaznam',
        'typ_zrizovatele' => 'getTypZrizovatele',
        'angazovane_osoby' => 'getAngazovaneOsoby',
        'kontakty' => 'getKontakty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['poradove_cislo_zar'] = isset($data['poradove_cislo_zar']) ? $data['poradove_cislo_zar'] : null;
        $this->container['poradove_cislo_prac'] = isset($data['poradove_cislo_prac']) ? $data['poradove_cislo_prac'] : null;
        $this->container['typ_subjektu'] = isset($data['typ_subjektu']) ? $data['typ_subjektu'] : null;
        $this->container['druh_zarizeni'] = isset($data['druh_zarizeni']) ? $data['druh_zarizeni'] : null;
        $this->container['primarni_zaznam'] = isset($data['primarni_zaznam']) ? $data['primarni_zaznam'] : null;
        $this->container['typ_zrizovatele'] = isset($data['typ_zrizovatele']) ? $data['typ_zrizovatele'] : null;
        $this->container['angazovane_osoby'] = isset($data['angazovane_osoby']) ? $data['angazovane_osoby'] : null;
        $this->container['kontakty'] = isset($data['kontakty']) ? $data['kontakty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets poradove_cislo_zar
     *
     * @return string
     */
    public function getPoradoveCisloZar()
    {
        return $this->container['poradove_cislo_zar'];
    }

    /**
     * Sets poradove_cislo_zar
     *
     * @param string $poradove_cislo_zar Pořadové číslo zařízení
     *
     * @return $this
     */
    public function setPoradoveCisloZar($poradove_cislo_zar)
    {
        $this->container['poradove_cislo_zar'] = $poradove_cislo_zar;

        return $this;
    }

    /**
     * Gets poradove_cislo_prac
     *
     * @return string
     */
    public function getPoradoveCisloPrac()
    {
        return $this->container['poradove_cislo_prac'];
    }

    /**
     * Sets poradove_cislo_prac
     *
     * @param string $poradove_cislo_prac Pořadové číslo pracovistě
     *
     * @return $this
     */
    public function setPoradoveCisloPrac($poradove_cislo_prac)
    {
        $this->container['poradove_cislo_prac'] = $poradove_cislo_prac;

        return $this;
    }

    /**
     * Gets typ_subjektu
     *
     * @return string
     */
    public function getTypSubjektu()
    {
        return $this->container['typ_subjektu'];
    }

    /**
     * Sets typ_subjektu
     *
     * @param string $typ_subjektu Typ ekonomického subjektu - forma hospodaření - kód (ciselnikKod: TypSubjektu, zdroj: nrpzs)
     *
     * @return $this
     */
    public function setTypSubjektu($typ_subjektu)
    {
        $this->container['typ_subjektu'] = $typ_subjektu;

        return $this;
    }

    /**
     * Gets druh_zarizeni
     *
     * @return string
     */
    public function getDruhZarizeni()
    {
        return $this->container['druh_zarizeni'];
    }

    /**
     * Sets druh_zarizeni
     *
     * @param string $druh_zarizeni Druh zdravotnického zařízení - kód (ciselnikKod: DruhZarizeni, zdroj: nrpzs)
     *
     * @return $this
     */
    public function setDruhZarizeni($druh_zarizeni)
    {
        $this->container['druh_zarizeni'] = $druh_zarizeni;

        return $this;
    }

    /**
     * Gets primarni_zaznam
     *
     * @return bool
     */
    public function getPrimarniZaznam()
    {
        return $this->container['primarni_zaznam'];
    }

    /**
     * Sets primarni_zaznam
     *
     * @param bool $primarni_zaznam primarni_zaznam
     *
     * @return $this
     */
    public function setPrimarniZaznam($primarni_zaznam)
    {
        $this->container['primarni_zaznam'] = $primarni_zaznam;

        return $this;
    }

    /**
     * Gets typ_zrizovatele
     *
     * @return string
     */
    public function getTypZrizovatele()
    {
        return $this->container['typ_zrizovatele'];
    }

    /**
     * Sets typ_zrizovatele
     *
     * @param string $typ_zrizovatele Typ zřizovatele zdravotnického zařízení - kód (ciselnikKod: Zrizovatel, zdroj: nrpzs)
     *
     * @return $this
     */
    public function setTypZrizovatele($typ_zrizovatele)
    {
        $this->container['typ_zrizovatele'] = $typ_zrizovatele;

        return $this;
    }

    /**
     * Gets angazovane_osoby
     *
     * @return \Swagger\Client\Model\AngazovanaOsobaNrpzs[]
     */
    public function getAngazovaneOsoby()
    {
        return $this->container['angazovane_osoby'];
    }

    /**
     * Sets angazovane_osoby
     *
     * @param \Swagger\Client\Model\AngazovanaOsobaNrpzs[] $angazovane_osoby angazovane_osoby
     *
     * @return $this
     */
    public function setAngazovaneOsoby($angazovane_osoby)
    {
        $this->container['angazovane_osoby'] = $angazovane_osoby;

        return $this;
    }

    /**
     * Gets kontakty
     *
     * @return \Swagger\Client\Model\Kontakty
     */
    public function getKontakty()
    {
        return $this->container['kontakty'];
    }

    /**
     * Sets kontakty
     *
     * @param \Swagger\Client\Model\Kontakty $kontakty kontakty
     *
     * @return $this
     */
    public function setKontakty($kontakty)
    {
        $this->container['kontakty'] = $kontakty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
