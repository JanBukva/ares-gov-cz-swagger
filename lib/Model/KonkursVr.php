<?php
/**
 * KonkursVr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * KonkursVr Class Doc Comment
 *
 * @category Class
 * @description Konkurzní řízení
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KonkursVr extends DatumZapisuVymazuUdajeVr 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'KonkursVr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'spravce' => '\Swagger\Client\Model\AngazmaOsobaVr[]',
        'typ_konkursu' => 'string',
        'datum_rozhodnuti_os' => '\DateTime',
        'datum_vyveseni' => '\DateTime',
        'spis_zn_os' => 'string',
        'text' => 'string',
        'zruseni_konkursu' => '\Swagger\Client\Model\ObecnyTextVr[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'spravce' => null,
        'typ_konkursu' => null,
        'datum_rozhodnuti_os' => 'date',
        'datum_vyveseni' => 'date',
        'spis_zn_os' => null,
        'text' => null,
        'zruseni_konkursu' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spravce' => 'spravce',
        'typ_konkursu' => 'typKonkursu',
        'datum_rozhodnuti_os' => 'datumRozhodnutiOs',
        'datum_vyveseni' => 'datumVyveseni',
        'spis_zn_os' => 'spisZnOs',
        'text' => 'text',
        'zruseni_konkursu' => 'zruseniKonkursu'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spravce' => 'setSpravce',
        'typ_konkursu' => 'setTypKonkursu',
        'datum_rozhodnuti_os' => 'setDatumRozhodnutiOs',
        'datum_vyveseni' => 'setDatumVyveseni',
        'spis_zn_os' => 'setSpisZnOs',
        'text' => 'setText',
        'zruseni_konkursu' => 'setZruseniKonkursu'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spravce' => 'getSpravce',
        'typ_konkursu' => 'getTypKonkursu',
        'datum_rozhodnuti_os' => 'getDatumRozhodnutiOs',
        'datum_vyveseni' => 'getDatumVyveseni',
        'spis_zn_os' => 'getSpisZnOs',
        'text' => 'getText',
        'zruseni_konkursu' => 'getZruseniKonkursu'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['spravce'] = isset($data['spravce']) ? $data['spravce'] : null;
        $this->container['typ_konkursu'] = isset($data['typ_konkursu']) ? $data['typ_konkursu'] : null;
        $this->container['datum_rozhodnuti_os'] = isset($data['datum_rozhodnuti_os']) ? $data['datum_rozhodnuti_os'] : null;
        $this->container['datum_vyveseni'] = isset($data['datum_vyveseni']) ? $data['datum_vyveseni'] : null;
        $this->container['spis_zn_os'] = isset($data['spis_zn_os']) ? $data['spis_zn_os'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['zruseni_konkursu'] = isset($data['zruseni_konkursu']) ? $data['zruseni_konkursu'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spravce
     *
     * @return \Swagger\Client\Model\AngazmaOsobaVr[]
     */
    public function getSpravce()
    {
        return $this->container['spravce'];
    }

    /**
     * Sets spravce
     *
     * @param \Swagger\Client\Model\AngazmaOsobaVr[] $spravce spravce
     *
     * @return $this
     */
    public function setSpravce($spravce)
    {
        $this->container['spravce'] = $spravce;

        return $this;
    }

    /**
     * Gets typ_konkursu
     *
     * @return string
     */
    public function getTypKonkursu()
    {
        return $this->container['typ_konkursu'];
    }

    /**
     * Sets typ_konkursu
     *
     * @param string $typ_konkursu Typ konkursu - kód (ciselnikKod: TypKonkursu)
     *
     * @return $this
     */
    public function setTypKonkursu($typ_konkursu)
    {
        $this->container['typ_konkursu'] = $typ_konkursu;

        return $this;
    }

    /**
     * Gets datum_rozhodnuti_os
     *
     * @return \DateTime
     */
    public function getDatumRozhodnutiOs()
    {
        return $this->container['datum_rozhodnuti_os'];
    }

    /**
     * Sets datum_rozhodnuti_os
     *
     * @param \DateTime $datum_rozhodnuti_os Datum rozhodnutí okresního soudu
     *
     * @return $this
     */
    public function setDatumRozhodnutiOs($datum_rozhodnuti_os)
    {
        $this->container['datum_rozhodnuti_os'] = $datum_rozhodnuti_os;

        return $this;
    }

    /**
     * Gets datum_vyveseni
     *
     * @return \DateTime
     */
    public function getDatumVyveseni()
    {
        return $this->container['datum_vyveseni'];
    }

    /**
     * Sets datum_vyveseni
     *
     * @param \DateTime $datum_vyveseni Datum vyvěšení rozhodnutí
     *
     * @return $this
     */
    public function setDatumVyveseni($datum_vyveseni)
    {
        $this->container['datum_vyveseni'] = $datum_vyveseni;

        return $this;
    }

    /**
     * Gets spis_zn_os
     *
     * @return string
     */
    public function getSpisZnOs()
    {
        return $this->container['spis_zn_os'];
    }

    /**
     * Sets spis_zn_os
     *
     * @param string $spis_zn_os spis_zn_os
     *
     * @return $this
     */
    public function setSpisZnOs($spis_zn_os)
    {
        $this->container['spis_zn_os'] = $spis_zn_os;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Vlastní informace o konkurzním řízení
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets zruseni_konkursu
     *
     * @return \Swagger\Client\Model\ObecnyTextVr[]
     */
    public function getZruseniKonkursu()
    {
        return $this->container['zruseni_konkursu'];
    }

    /**
     * Sets zruseni_konkursu
     *
     * @param \Swagger\Client\Model\ObecnyTextVr[] $zruseni_konkursu zruseni_konkursu
     *
     * @return $this
     */
    public function setZruseniKonkursu($zruseni_konkursu)
    {
        $this->container['zruseni_konkursu'] = $zruseni_konkursu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
