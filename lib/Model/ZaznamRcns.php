<?php
/**
 * ZaznamRcns
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.58
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ZaznamRcns Class Doc Comment
 *
 * @category Class
 * @description Detailní informace o ekonomickém subjektu ze zdroje RCNS
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZaznamRcns extends ZaznamRcnsZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZaznamRcns';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'statutarni_organ' => '\Swagger\Client\Model\StatutatniOrganRcns',
        'likvidatori' => '\Swagger\Client\Model\AngazmaRcns[]',
        'konkurzni_spravci' => '\Swagger\Client\Model\AngazmaRcns[]',
        'opatrovnici' => '\Swagger\Client\Model\AngazmaRcns[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'statutarni_organ' => null,
        'likvidatori' => null,
        'konkurzni_spravci' => null,
        'opatrovnici' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statutarni_organ' => 'statutarniOrgan',
        'likvidatori' => 'likvidatori',
        'konkurzni_spravci' => 'konkurzniSpravci',
        'opatrovnici' => 'opatrovnici'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statutarni_organ' => 'setStatutarniOrgan',
        'likvidatori' => 'setLikvidatori',
        'konkurzni_spravci' => 'setKonkurzniSpravci',
        'opatrovnici' => 'setOpatrovnici'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statutarni_organ' => 'getStatutarniOrgan',
        'likvidatori' => 'getLikvidatori',
        'konkurzni_spravci' => 'getKonkurzniSpravci',
        'opatrovnici' => 'getOpatrovnici'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['statutarni_organ'] = isset($data['statutarni_organ']) ? $data['statutarni_organ'] : null;
        $this->container['likvidatori'] = isset($data['likvidatori']) ? $data['likvidatori'] : null;
        $this->container['konkurzni_spravci'] = isset($data['konkurzni_spravci']) ? $data['konkurzni_spravci'] : null;
        $this->container['opatrovnici'] = isset($data['opatrovnici']) ? $data['opatrovnici'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets statutarni_organ
     *
     * @return \Swagger\Client\Model\StatutatniOrganRcns
     */
    public function getStatutarniOrgan()
    {
        return $this->container['statutarni_organ'];
    }

    /**
     * Sets statutarni_organ
     *
     * @param \Swagger\Client\Model\StatutatniOrganRcns $statutarni_organ statutarni_organ
     *
     * @return $this
     */
    public function setStatutarniOrgan($statutarni_organ)
    {
        $this->container['statutarni_organ'] = $statutarni_organ;

        return $this;
    }

    /**
     * Gets likvidatori
     *
     * @return \Swagger\Client\Model\AngazmaRcns[]
     */
    public function getLikvidatori()
    {
        return $this->container['likvidatori'];
    }

    /**
     * Sets likvidatori
     *
     * @param \Swagger\Client\Model\AngazmaRcns[] $likvidatori likvidatori
     *
     * @return $this
     */
    public function setLikvidatori($likvidatori)
    {
        $this->container['likvidatori'] = $likvidatori;

        return $this;
    }

    /**
     * Gets konkurzni_spravci
     *
     * @return \Swagger\Client\Model\AngazmaRcns[]
     */
    public function getKonkurzniSpravci()
    {
        return $this->container['konkurzni_spravci'];
    }

    /**
     * Sets konkurzni_spravci
     *
     * @param \Swagger\Client\Model\AngazmaRcns[] $konkurzni_spravci konkurzni_spravci
     *
     * @return $this
     */
    public function setKonkurzniSpravci($konkurzni_spravci)
    {
        $this->container['konkurzni_spravci'] = $konkurzni_spravci;

        return $this;
    }

    /**
     * Gets opatrovnici
     *
     * @return \Swagger\Client\Model\AngazmaRcns[]
     */
    public function getOpatrovnici()
    {
        return $this->container['opatrovnici'];
    }

    /**
     * Sets opatrovnici
     *
     * @param \Swagger\Client\Model\AngazmaRcns[] $opatrovnici opatrovnici
     *
     * @return $this
     */
    public function setOpatrovnici($opatrovnici)
    {
        $this->container['opatrovnici'] = $opatrovnici;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
