<?php
/**
 * EkonomickySubjekt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * EkonomickySubjekt Class Doc Comment
 *
 * @category Class
 * @description Základní informace o ekonomickém subjektu
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EkonomickySubjekt extends EkonomickySubjektZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EkonomickySubjekt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ico_id' => 'string',
        'adresa_dorucovaci' => '\Swagger\Client\Model\AdresaDorucovaci',
        'seznam_registraci' => '\Swagger\Client\Model\SeznamRegistraci',
        'primarni_zdroj' => 'string',
        'dalsi_udaje' => '\Swagger\Client\Model\EkonomickySubjektDalsiUdaje[]',
        'cz_nace' => 'string[]',
        'sub_registr_szr' => 'string',
        'dic_sk_dph' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ico_id' => null,
        'adresa_dorucovaci' => null,
        'seznam_registraci' => null,
        'primarni_zdroj' => null,
        'dalsi_udaje' => null,
        'cz_nace' => null,
        'sub_registr_szr' => null,
        'dic_sk_dph' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ico_id' => 'icoId',
        'adresa_dorucovaci' => 'adresaDorucovaci',
        'seznam_registraci' => 'seznamRegistraci',
        'primarni_zdroj' => 'primarniZdroj',
        'dalsi_udaje' => 'dalsiUdaje',
        'cz_nace' => 'czNace',
        'sub_registr_szr' => 'subRegistrSzr',
        'dic_sk_dph' => 'dicSkDph'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ico_id' => 'setIcoId',
        'adresa_dorucovaci' => 'setAdresaDorucovaci',
        'seznam_registraci' => 'setSeznamRegistraci',
        'primarni_zdroj' => 'setPrimarniZdroj',
        'dalsi_udaje' => 'setDalsiUdaje',
        'cz_nace' => 'setCzNace',
        'sub_registr_szr' => 'setSubRegistrSzr',
        'dic_sk_dph' => 'setDicSkDph'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ico_id' => 'getIcoId',
        'adresa_dorucovaci' => 'getAdresaDorucovaci',
        'seznam_registraci' => 'getSeznamRegistraci',
        'primarni_zdroj' => 'getPrimarniZdroj',
        'dalsi_udaje' => 'getDalsiUdaje',
        'cz_nace' => 'getCzNace',
        'sub_registr_szr' => 'getSubRegistrSzr',
        'dic_sk_dph' => 'getDicSkDph'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['ico_id'] = isset($data['ico_id']) ? $data['ico_id'] : null;
        $this->container['adresa_dorucovaci'] = isset($data['adresa_dorucovaci']) ? $data['adresa_dorucovaci'] : null;
        $this->container['seznam_registraci'] = isset($data['seznam_registraci']) ? $data['seznam_registraci'] : null;
        $this->container['primarni_zdroj'] = isset($data['primarni_zdroj']) ? $data['primarni_zdroj'] : null;
        $this->container['dalsi_udaje'] = isset($data['dalsi_udaje']) ? $data['dalsi_udaje'] : null;
        $this->container['cz_nace'] = isset($data['cz_nace']) ? $data['cz_nace'] : null;
        $this->container['sub_registr_szr'] = isset($data['sub_registr_szr']) ? $data['sub_registr_szr'] : null;
        $this->container['dic_sk_dph'] = isset($data['dic_sk_dph']) ? $data['dic_sk_dph'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ico_id
     *
     * @return string
     */
    public function getIcoId()
    {
        return $this->container['ico_id'];
    }

    /**
     * Sets ico_id
     *
     * @param string $ico_id Ičo ekonomického subjektu, pokud je ičo přidělené. Id ekonomického subjektu, pokud je ičo nepřidělené.
     *
     * @return $this
     */
    public function setIcoId($ico_id)
    {
        $this->container['ico_id'] = $ico_id;

        return $this;
    }

    /**
     * Gets adresa_dorucovaci
     *
     * @return \Swagger\Client\Model\AdresaDorucovaci
     */
    public function getAdresaDorucovaci()
    {
        return $this->container['adresa_dorucovaci'];
    }

    /**
     * Sets adresa_dorucovaci
     *
     * @param \Swagger\Client\Model\AdresaDorucovaci $adresa_dorucovaci adresa_dorucovaci
     *
     * @return $this
     */
    public function setAdresaDorucovaci($adresa_dorucovaci)
    {
        $this->container['adresa_dorucovaci'] = $adresa_dorucovaci;

        return $this;
    }

    /**
     * Gets seznam_registraci
     *
     * @return \Swagger\Client\Model\SeznamRegistraci
     */
    public function getSeznamRegistraci()
    {
        return $this->container['seznam_registraci'];
    }

    /**
     * Sets seznam_registraci
     *
     * @param \Swagger\Client\Model\SeznamRegistraci $seznam_registraci seznam_registraci
     *
     * @return $this
     */
    public function setSeznamRegistraci($seznam_registraci)
    {
        $this->container['seznam_registraci'] = $seznam_registraci;

        return $this;
    }

    /**
     * Gets primarni_zdroj
     *
     * @return string
     */
    public function getPrimarniZdroj()
    {
        return $this->container['primarni_zdroj'];
    }

    /**
     * Sets primarni_zdroj
     *
     * @param string $primarni_zdroj Identifikace primárního zdroje dat.
     *
     * @return $this
     */
    public function setPrimarniZdroj($primarni_zdroj)
    {
        $this->container['primarni_zdroj'] = $primarni_zdroj;

        return $this;
    }

    /**
     * Gets dalsi_udaje
     *
     * @return \Swagger\Client\Model\EkonomickySubjektDalsiUdaje[]
     */
    public function getDalsiUdaje()
    {
        return $this->container['dalsi_udaje'];
    }

    /**
     * Sets dalsi_udaje
     *
     * @param \Swagger\Client\Model\EkonomickySubjektDalsiUdaje[] $dalsi_udaje dalsi_udaje
     *
     * @return $this
     */
    public function setDalsiUdaje($dalsi_udaje)
    {
        $this->container['dalsi_udaje'] = $dalsi_udaje;

        return $this;
    }

    /**
     * Gets cz_nace
     *
     * @return string[]
     */
    public function getCzNace()
    {
        return $this->container['cz_nace'];
    }

    /**
     * Sets cz_nace
     *
     * @param string[] $cz_nace cz_nace
     *
     * @return $this
     */
    public function setCzNace($cz_nace)
    {
        $this->container['cz_nace'] = $cz_nace;

        return $this;
    }

    /**
     * Gets sub_registr_szr
     *
     * @return string
     */
    public function getSubRegistrSzr()
    {
        return $this->container['sub_registr_szr'];
    }

    /**
     * Sets sub_registr_szr
     *
     * @param string $sub_registr_szr Indeftifikátor sub-registru zdroje SZR - kód (ciselnikKod: SubRegistrSzr, zdroj:com)
     *
     * @return $this
     */
    public function setSubRegistrSzr($sub_registr_szr)
    {
        $this->container['sub_registr_szr'] = $sub_registr_szr;

        return $this;
    }

    /**
     * Gets dic_sk_dph
     *
     * @return string
     */
    public function getDicSkDph()
    {
        return $this->container['dic_sk_dph'];
    }

    /**
     * Sets dic_sk_dph
     *
     * @param string $dic_sk_dph Daňové identifikační číslo skupiny plátce DPH ve formátu CZNNNNNNNNNN
     *
     * @return $this
     */
    public function setDicSkDph($dic_sk_dph)
    {
        $this->container['dic_sk_dph'] = $dic_sk_dph;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
