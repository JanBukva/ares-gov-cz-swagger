<?php
/**
 * Ciselnik
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.58
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Ciselnik Class Doc Comment
 *
 * @category Class
 * @description Číselník
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Ciselnik implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ciselnik';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kod_ciselniku' => 'string',
        'nazev_ciselniku' => 'string',
        'polozky_ciselniku' => '\Swagger\Client\Model\PolozkaCiselniku[]',
        'zdroj_ciselniku' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kod_ciselniku' => null,
        'nazev_ciselniku' => null,
        'polozky_ciselniku' => null,
        'zdroj_ciselniku' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kod_ciselniku' => 'kodCiselniku',
        'nazev_ciselniku' => 'nazevCiselniku',
        'polozky_ciselniku' => 'polozkyCiselniku',
        'zdroj_ciselniku' => 'zdrojCiselniku'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kod_ciselniku' => 'setKodCiselniku',
        'nazev_ciselniku' => 'setNazevCiselniku',
        'polozky_ciselniku' => 'setPolozkyCiselniku',
        'zdroj_ciselniku' => 'setZdrojCiselniku'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kod_ciselniku' => 'getKodCiselniku',
        'nazev_ciselniku' => 'getNazevCiselniku',
        'polozky_ciselniku' => 'getPolozkyCiselniku',
        'zdroj_ciselniku' => 'getZdrojCiselniku'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kod_ciselniku'] = isset($data['kod_ciselniku']) ? $data['kod_ciselniku'] : null;
        $this->container['nazev_ciselniku'] = isset($data['nazev_ciselniku']) ? $data['nazev_ciselniku'] : null;
        $this->container['polozky_ciselniku'] = isset($data['polozky_ciselniku']) ? $data['polozky_ciselniku'] : null;
        $this->container['zdroj_ciselniku'] = isset($data['zdroj_ciselniku']) ? $data['zdroj_ciselniku'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kod_ciselniku
     *
     * @return string
     */
    public function getKodCiselniku()
    {
        return $this->container['kod_ciselniku'];
    }

    /**
     * Sets kod_ciselniku
     *
     * @param string $kod_ciselniku Kód číselníku
     *
     * @return $this
     */
    public function setKodCiselniku($kod_ciselniku)
    {
        $this->container['kod_ciselniku'] = $kod_ciselniku;

        return $this;
    }

    /**
     * Gets nazev_ciselniku
     *
     * @return string
     */
    public function getNazevCiselniku()
    {
        return $this->container['nazev_ciselniku'];
    }

    /**
     * Sets nazev_ciselniku
     *
     * @param string $nazev_ciselniku Název číselníku
     *
     * @return $this
     */
    public function setNazevCiselniku($nazev_ciselniku)
    {
        $this->container['nazev_ciselniku'] = $nazev_ciselniku;

        return $this;
    }

    /**
     * Gets polozky_ciselniku
     *
     * @return \Swagger\Client\Model\PolozkaCiselniku[]
     */
    public function getPolozkyCiselniku()
    {
        return $this->container['polozky_ciselniku'];
    }

    /**
     * Sets polozky_ciselniku
     *
     * @param \Swagger\Client\Model\PolozkaCiselniku[] $polozky_ciselniku polozky_ciselniku
     *
     * @return $this
     */
    public function setPolozkyCiselniku($polozky_ciselniku)
    {
        $this->container['polozky_ciselniku'] = $polozky_ciselniku;

        return $this;
    }

    /**
     * Gets zdroj_ciselniku
     *
     * @return string
     */
    public function getZdrojCiselniku()
    {
        return $this->container['zdroj_ciselniku'];
    }

    /**
     * Sets zdroj_ciselniku
     *
     * @param string $zdroj_ciselniku Zdroj číselníku (ciselnikKod: StavZdroje)
     *
     * @return $this
     */
    public function setZdrojCiselniku($zdroj_ciselniku)
    {
        $this->container['zdroj_ciselniku'] = $zdroj_ciselniku;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
