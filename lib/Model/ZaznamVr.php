<?php
/**
 * ZaznamVr
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ARES: REST API - veřejné
 *
 * REST rozhraní systému ARES
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ZaznamVr Class Doc Comment
 *
 * @category Class
 * @description Detailní informace o ekonomickém subjektu ze zdroje VR
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZaznamVr extends ZaznamVrZaklad 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ZaznamVr';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ostatni_organy' => '\Swagger\Client\Model\OrganVr[]',
        'statutarni_organy' => '\Swagger\Client\Model\StatutarniOrganVr[]',
        'podnikatel' => '\Swagger\Client\Model\PodnikatelVr[]',
        'spolecnici' => '\Swagger\Client\Model\SpolecniciVr[]',
        'odstepne_zavody' => '\Swagger\Client\Model\OdstepnyZavodVr[]',
        'insolvence' => '\Swagger\Client\Model\InsolvencniRizeniVr[]',
        'konkursy' => '\Swagger\Client\Model\KonkursVr[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ostatni_organy' => null,
        'statutarni_organy' => null,
        'podnikatel' => null,
        'spolecnici' => null,
        'odstepne_zavody' => null,
        'insolvence' => null,
        'konkursy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ostatni_organy' => 'ostatniOrgany',
        'statutarni_organy' => 'statutarniOrgany',
        'podnikatel' => 'podnikatel',
        'spolecnici' => 'spolecnici',
        'odstepne_zavody' => 'odstepneZavody',
        'insolvence' => 'insolvence',
        'konkursy' => 'konkursy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ostatni_organy' => 'setOstatniOrgany',
        'statutarni_organy' => 'setStatutarniOrgany',
        'podnikatel' => 'setPodnikatel',
        'spolecnici' => 'setSpolecnici',
        'odstepne_zavody' => 'setOdstepneZavody',
        'insolvence' => 'setInsolvence',
        'konkursy' => 'setKonkursy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ostatni_organy' => 'getOstatniOrgany',
        'statutarni_organy' => 'getStatutarniOrgany',
        'podnikatel' => 'getPodnikatel',
        'spolecnici' => 'getSpolecnici',
        'odstepne_zavody' => 'getOdstepneZavody',
        'insolvence' => 'getInsolvence',
        'konkursy' => 'getKonkursy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }




    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['ostatni_organy'] = isset($data['ostatni_organy']) ? $data['ostatni_organy'] : null;
        $this->container['statutarni_organy'] = isset($data['statutarni_organy']) ? $data['statutarni_organy'] : null;
        $this->container['podnikatel'] = isset($data['podnikatel']) ? $data['podnikatel'] : null;
        $this->container['spolecnici'] = isset($data['spolecnici']) ? $data['spolecnici'] : null;
        $this->container['odstepne_zavody'] = isset($data['odstepne_zavody']) ? $data['odstepne_zavody'] : null;
        $this->container['insolvence'] = isset($data['insolvence']) ? $data['insolvence'] : null;
        $this->container['konkursy'] = isset($data['konkursy']) ? $data['konkursy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ostatni_organy
     *
     * @return \Swagger\Client\Model\OrganVr[]
     */
    public function getOstatniOrgany()
    {
        return $this->container['ostatni_organy'];
    }

    /**
     * Sets ostatni_organy
     *
     * @param \Swagger\Client\Model\OrganVr[] $ostatni_organy ostatni_organy
     *
     * @return $this
     */
    public function setOstatniOrgany($ostatni_organy)
    {
        $this->container['ostatni_organy'] = $ostatni_organy;

        return $this;
    }

    /**
     * Gets statutarni_organy
     *
     * @return \Swagger\Client\Model\StatutarniOrganVr[]
     */
    public function getStatutarniOrgany()
    {
        return $this->container['statutarni_organy'];
    }

    /**
     * Sets statutarni_organy
     *
     * @param \Swagger\Client\Model\StatutarniOrganVr[] $statutarni_organy statutarni_organy
     *
     * @return $this
     */
    public function setStatutarniOrgany($statutarni_organy)
    {
        $this->container['statutarni_organy'] = $statutarni_organy;

        return $this;
    }

    /**
     * Gets podnikatel
     *
     * @return \Swagger\Client\Model\PodnikatelVr[]
     */
    public function getPodnikatel()
    {
        return $this->container['podnikatel'];
    }

    /**
     * Sets podnikatel
     *
     * @param \Swagger\Client\Model\PodnikatelVr[] $podnikatel podnikatel
     *
     * @return $this
     */
    public function setPodnikatel($podnikatel)
    {
        $this->container['podnikatel'] = $podnikatel;

        return $this;
    }

    /**
     * Gets spolecnici
     *
     * @return \Swagger\Client\Model\SpolecniciVr[]
     */
    public function getSpolecnici()
    {
        return $this->container['spolecnici'];
    }

    /**
     * Sets spolecnici
     *
     * @param \Swagger\Client\Model\SpolecniciVr[] $spolecnici spolecnici
     *
     * @return $this
     */
    public function setSpolecnici($spolecnici)
    {
        $this->container['spolecnici'] = $spolecnici;

        return $this;
    }

    /**
     * Gets odstepne_zavody
     *
     * @return \Swagger\Client\Model\OdstepnyZavodVr[]
     */
    public function getOdstepneZavody()
    {
        return $this->container['odstepne_zavody'];
    }

    /**
     * Sets odstepne_zavody
     *
     * @param \Swagger\Client\Model\OdstepnyZavodVr[] $odstepne_zavody odstepne_zavody
     *
     * @return $this
     */
    public function setOdstepneZavody($odstepne_zavody)
    {
        $this->container['odstepne_zavody'] = $odstepne_zavody;

        return $this;
    }

    /**
     * Gets insolvence
     *
     * @return \Swagger\Client\Model\InsolvencniRizeniVr[]
     */
    public function getInsolvence()
    {
        return $this->container['insolvence'];
    }

    /**
     * Sets insolvence
     *
     * @param \Swagger\Client\Model\InsolvencniRizeniVr[] $insolvence insolvence
     *
     * @return $this
     */
    public function setInsolvence($insolvence)
    {
        $this->container['insolvence'] = $insolvence;

        return $this;
    }

    /**
     * Gets konkursy
     *
     * @return \Swagger\Client\Model\KonkursVr[]
     */
    public function getKonkursy()
    {
        return $this->container['konkursy'];
    }

    /**
     * Sets konkursy
     *
     * @param \Swagger\Client\Model\KonkursVr[] $konkursy konkursy
     *
     * @return $this
     */
    public function setKonkursy($konkursy)
    {
        $this->container['konkursy'] = $konkursy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
